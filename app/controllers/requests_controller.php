<?phpclass RequestsController extends AppController{     var $show = 15;	  var $uses = array("Customer","Product","Order","Mark","Model","Category","Article","Subcategory","EngineVolume","EngineType","WheelDrive","BodyType","Transmission","Market","PartState","Request","RequestPart","RequestAnswer","Promt","Responsible","Credential");	    function __construct()	{	 	parent::__construct();	 			$this->page = empty($_GET['page'])? '1': Sanitize::paranoid($_GET['page']);	}		   function add_request() { 	     if($this->othAuth->group('id') !=5 && $this->othAuth->group('id') !=6)  {			$this->redirect("/");		}  	                  $this->set('title', 'Обращение покупателя');                                   $this->set('engine_volumes', $this->EngineVolume->findAll(null,null, "name ASC"));$this->set('engine_types', $this->EngineType->findAll(null,null, "name ASC"));$this->set('wheel_drives', $this->WheelDrive->findAll(null,null, "name ASC"));$this->set('body_types', $this->BodyType->findAll(null,null, "name ASC"));$this->set('transmissions', $this->Transmission->findAll(null,null, "name ASC"));$this->set('markets', $this->Market->findAll(null,null, "name ASC"));$this->set('part_states', $this->PartState->findAll(null,null, "name ASC"));$this->set('responsibles', $this->Responsible->findAll());$this->Request->RequestPart->bindModel(array('hasMany' => array('RequestAnswer')));		                 if(isset($this->params['data']['Request']))                 {		 			                        $this->data['Request']['model_id'] = $_POST['model'];						if(empty($this->params['data']['Request']['id']))							$this->data['Request']['customer_id'] = $this->othAuth->user("id");                        $errors = false;						if(!$this->Request->validates($this->data)) {								$errors = true;						}						if(empty($this->data['Request']['customer_name'])) {							$this->Request->invalidate('customer_name');							$errors = true;						}						if(empty($this->data['Request']['customer_phone'])) {							$this->Request->invalidate('customer_phone');							$errors = true;						}                        $request_parts_errors = array();                        $i=0;	                        foreach($this->data['RequestParts'] as $request_part) {                                $i++;                                if(!empty($request_part["name"]) && $request_part["name"]!='Наименование'  && empty($request_part["part_state_id"]))	{                                         $request_parts_errors[$i]['part_state_id'] = '<br><font color=red><small>обязательное поле</small></font>';                                          $errors = true;                                }									}						if(!$errors) {										$check_number = $this->Request->read(null,$this->data['Request']['id']);										if(!empty($check_number))											$this->data['Request']['check_number'] =$check_number['Request']['check_number'];										else{											$check_number = mysql_fetch_row(mysql_query("SELECT max(check_number) FROM `requests` WHERE year(created) = ".date('Y')." "));											$this->data['Request']['check_number'] =$check_number[0] + 1;										}										 										 $this->data['Request']['check_date']=date('Y-m-d 00:00:00', strtotime($this->data['Request']['check_date']));                                       $this->Request->save($this->data);                                        $request_id = $this->Request->id;										$j=0;																				mysql_query("delete from request_answers where request_part_id in (select id from request_parts										where request_id='".$request_id."') ");										mysql_query("delete from request_parts where request_id='".$request_id."'");                                        foreach($this->data['RequestPart'] as $request_part) {										                                                          if(!empty($request_part["name"]) && $request_part["name"]!='Наименование'  && !empty($request_part["part_state_id"]))	{													 													 $request_part["request_id"] = $request_id;													 $data["RequestPart"] = $request_part;													 $this->RequestPart->save($data);													 													 /* ответы */													 foreach($request_part['RequestAnswer'] as $variant) {																												if(!empty($variant['start_price'])) {                                                                                                                                  $variant["request_part_id"] = $this->RequestPart->id;                                                            $variant["itog_price"] = $variant["start_price"];															$data["RequestAnswer"] = $variant;															$this->RequestAnswer->save($data);                                                            unset($this->RequestAnswer->id);                                                        }																											}													                                                      unset($this->RequestPart->id);                                                }																	$j++;										}                                $this->Session->setFlash('<p><B>Обращение сохранено</B>','flash');									$this->redirect($this->data[back_url]);										                        } else {                                  $this->Session->setFlash('<font color=red>Обнаружены ошибки</font><p>','flash');	                                  $this->set('request_parts_errors',$request_parts_errors);                        }		} else if(!empty($_GET[id]))		{			$where = "Request.id=".Sanitize::paranoid($_GET['id']);			if($this->othAuth->group('id') == 5)						$where .= " AND Request.customer_id = '".$this->othAuth->user("id")."' ";									$data_request = $this->Request->findAll($where,null,null,null,null,2);			if(!$data_request) {				//$this->redirect("/all_requests.html");				echo "<script>history.go(-2)</script>";			}			$this->params['data'] = $data_request[0];		}}	function all_requests() {if($_GET['update']=='YES'){		/*$count=$this->Request->findCount();		$i=0;		while($i<$count){		$i++;		mysql_query('UPDATE `requests` SET check_number='.$i.' WHERE id ='.$i.'');		}		$chec_dates=$this->Request->findAll();		foreach($chec_dates as $check_date){		mysql_query('UPDATE `requests` SET check_date="'.$check_date['Request']['created'].'" WHERE id ='.$check_date['Request']['id'].'');		}*/	}	$this->set('title', 'Журнал обращений покупателей / продаж');if(!empty($_GET['who'])){		$whos = $this->Responsible->findAll();		foreach($whos as $who){			mysql_query('UPDATE `requests` SET responsible_id='.$who['Responsible']['id'].' WHERE responsible ="'.$who['Responsible']['who'].'"');		}	}			if(!$this->logged) {			$this->redirect("/login.html");		}             if($this->othAuth->group('id') !=5 && $this->othAuth->group('id') !=6)  {			$this->redirect("/");		}		if($this->data['Promt']['completed']==0){mysql_query("DELETE FROM promts WHERE id=".$this->data['Promt']['id']." ");if(!empty($this->data['Promt']['date'])) $this->data['Promt']['date']=date('Y-m-d', strtotime($this->data['Promt']['date']));$this->data['Promt']['time']=$this->data['Promt']['hour'].($this->data['Promt']['minute']<9? '0'.$this->data['Promt']['minute'] : $this->data['Promt']['minute']);if(!empty($this->data['Promt']['title']))	if(!empty($this->data['Promt']['date']))			$this->Promt->save($this->data);}else{mysql_query("UPDATE promts SET completed=".$this->data['Promt']['completed']." WHERE id=".$this->data['Promt']['id']." ");}$this->Request->RequestPart->bindModel(array('hasMany' => array('RequestAnswer')));                                  $where = "Request.customer_name IS NOT NULL ";					if($this->othAuth->group('id') == 5)						$where .= " AND Request.customer_id = '".$this->othAuth->user("id")."' ";                    if(!empty($_GET[number]))                               $where .= " AND Request.id='".$_GET[number]."' ";                      if(!empty($_GET[date]))                               $where .= " AND Request.created>='".date('Y-m-d 00:00:00', strtotime($_GET[date]))."'  AND  Request.created<='".date('Y-m-d 23:59:59', strtotime($_GET[date]))."'  ";                      if(!empty($_GET[lastname]))                               $where .= " AND Request.customer_name LIKE '%".$_GET[lastname]."%' ";                     if(!empty($_GET[phone]))                               $where .= " AND Request.customer_phone LIKE '%".$_GET[phone]."%' OR Request.customer_phone2 LIKE '%".$_GET[phone]."%' OR Request.customer_phone3 LIKE '%".$_GET[phone]."%'";					if(!empty($_GET[mark])){								$where_2="Mark.name IS NOT NULL ";								$where_2.= " AND Mark.name LIKE '%".$_GET[mark]."%' ";								$marks=$this->Request->findAll($where_2);								foreach($marks as $mark) {$where .= " AND Request.mark_id LIKE '%".$mark['Mark']['id']."%' ";}								}                    if(!empty($_GET[model])){								$where_2="Model.name IS NOT NULL ";								$where_2.= " AND Model.name LIKE '".$_GET[model]."' ";								$models=$this->Request->findAll($where_2);								foreach($models as $model) {									$where .= " AND Request.model_id LIKE '%".$model['Model']['id']."%' ";}								}                    if(!empty($_GET[progress]))                               $where .= " AND Request.progress LIKE '".$_GET[progress]."' ";							   					$m=(int)date('m')-3;					if($m<=0) {$m=12-$m;$y=(int)date('Y')-1;}else{$y=date('Y');}					if($m<10) $m='0'.$m;					$date=$y.'-'.$m.date('-d').' 00:00:00';										if(empty($_GET[arhive]) || $_GET[arhive]==0)								$where .= " AND DATE_FORMAT(Request.modified,'%Y-%m-%d %H:%i:%s')>'".$date."' ";					if($_GET[arhive]==1)								$where .= " AND DATE_FORMAT(Request.modified,'%Y-%m-%d %H:%i:%s')<'".$date."' ";												   		$data = $this->Request->findAll($where,null,'Request.created DESC',$this->show, $this->page, 2);		$this->set('data', $data);		$id_request='-1';		foreach($data as $idreq)		$id_request.=','.$idreq['Request']['id'];		$this->set('orders', $this->Order->findAll("WHERE id_request IN(".$id_request.")"));                $paging['style'] = 'html'; 			$paging['link'] = '/'.@$this->params['url']['url'].'?number='.$_GET[number].'&date='.$_GET[date].'&lastname='.$_GET[lastname].'&phone='.$_GET[phone].'&mark='.$_GET[mark].'&model='.$_GET[model].'&arhive='.$_GET[arhive].'&progress='.$_GET[progress].'&page=';					$paging['count'] = $this->Request->findCount( $where ,2);			$paging['page'] = $this->page;			$paging['limit'] = $this->show;			 $paging['show'] = array('10','20','30');			  $this->set('paging',$paging);			  			 			  		$where = "Promt.id IS NOT NULL AND Promt.completed LIKE '%0%' AND  DATE_FORMAT(date,'%Y-%m-%d')>'".$date."'";		$promts=$this->Promt->findAll($where);		$this->set('promts', $promts);			}		function check() {		if(!$_GET['id'])		  $this->redirect("/");				$this->layout = "blank";				if($this->othAuth->group("id")>2)		  $data = $this->Request->findAll("Request.id='".Sanitize::paranoid($_GET['id'])."'"); 		//else if ( strpos($_SERVER['HTTP_REFERER'],'detalline.ru/admin/orders') !== false || strpos($_SERVER['HTTP_REFERER'],'detalline333.ru/admin/orders') !== false)		  //$data = $this->Order->findAll("Order.id='".Sanitize::paranoid($_GET['id'])."' "); 		$this->set('data', $data[0]);				$this->Request->RequestPart->bindModel(array('hasMany' => array('RequestAnswer')));		$where = "Request.id=".Sanitize::paranoid($_GET['id']);				$data_request = $this->Request->findAll($where,null,null,null,null,2);		$this->params['data'] = $data_request[0];		$datas = $this->Request->findAll("WHERE Request.id=".$_GET['id']);		$this->set('datas', $datas);		$this->set('orders', $this->Order->findAll("WHERE id_request =".$_GET['id']));		$this->set('credentials', $this->Credential->findAll());		/*if($data[0]["Order"]["payment_id"]==3) {		  if(isset($_GET['check']))			$this->render("cash");		  else			$this->render("sbrf");		}		elseif($data[0]["Order"]["payment_id"]==2) 		  $this->render("wire");		elseif($data[0]["Order"]["payment_id"]==1) 		  $this->render("cash");		else		  $this->redirect("/");*/		  $this->render("cash");	}	}